// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// simexOutcome
arma::mat simexOutcome(arma::mat pred_mat, arma::vec lambdavec, arma::vec fail_times, arma::mat fail_ind, arma::mat init_b, int B, double simex_sd, int n);
RcppExport SEXP _SimexSurvOutcome_simexOutcome(SEXP pred_matSEXP, SEXP lambdavecSEXP, SEXP fail_timesSEXP, SEXP fail_indSEXP, SEXP init_bSEXP, SEXP BSEXP, SEXP simex_sdSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pred_mat(pred_matSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lambdavec(lambdavecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type fail_times(fail_timesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type fail_ind(fail_indSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type init_b(init_bSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type simex_sd(simex_sdSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(simexOutcome(pred_mat, lambdavec, fail_times, fail_ind, init_b, B, simex_sd, n));
    return rcpp_result_gen;
END_RCPP
}
// fastLM
List fastLM(const arma::mat& X, const arma::colvec& y);
RcppExport SEXP _SimexSurvOutcome_fastLM(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fastLM(X, y));
    return rcpp_result_gen;
END_RCPP
}
// newtonRaphson
arma::mat newtonRaphson(arma::mat pred_mat, arma::mat curr_beta, arma::mat failure_mat);
RcppExport SEXP _SimexSurvOutcome_newtonRaphson(SEXP pred_matSEXP, SEXP curr_betaSEXP, SEXP failure_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pred_mat(pred_matSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type curr_beta(curr_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type failure_mat(failure_matSEXP);
    rcpp_result_gen = Rcpp::wrap(newtonRaphson(pred_mat, curr_beta, failure_mat));
    return rcpp_result_gen;
END_RCPP
}
// quadExtrapolation
arma::mat quadExtrapolation(arma::colvec lambda_mat, arma::colvec coef1_mat, arma::colvec coef2_mat, arma::colvec coef3_mat);
RcppExport SEXP _SimexSurvOutcome_quadExtrapolation(SEXP lambda_matSEXP, SEXP coef1_matSEXP, SEXP coef2_matSEXP, SEXP coef3_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type lambda_mat(lambda_matSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type coef1_mat(coef1_matSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type coef2_mat(coef2_matSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type coef3_mat(coef3_matSEXP);
    rcpp_result_gen = Rcpp::wrap(quadExtrapolation(lambda_mat, coef1_mat, coef2_mat, coef3_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SimexSurvOutcome_simexOutcome", (DL_FUNC) &_SimexSurvOutcome_simexOutcome, 8},
    {"_SimexSurvOutcome_fastLM", (DL_FUNC) &_SimexSurvOutcome_fastLM, 2},
    {"_SimexSurvOutcome_newtonRaphson", (DL_FUNC) &_SimexSurvOutcome_newtonRaphson, 3},
    {"_SimexSurvOutcome_quadExtrapolation", (DL_FUNC) &_SimexSurvOutcome_quadExtrapolation, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_SimexSurvOutcome(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
